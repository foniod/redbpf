name: RedBPF build test

on:
  push:
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  BASE_IMAGE: ghcr.io/${{ github.repository_owner }}/foniod-build
  REDBPF_IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/redbpf-build

jobs:
  build-on-x86_64-ubuntu-2104:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
    -
      name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    -
      name: Initialize git submodules
      run: |
        git submodule update --init --recursive
    -
      name: Build RedBPF with the kernel headers on x86_64 Ubuntu 21.04
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-x86_64-ubuntu21.04 \
        bash -c 'export KERNEL_SOURCE=$(echo /lib/modules/*) \
          && echo KERNEL_SOURCE=$KERNEL_SOURCE \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'
    -
      name: Build RedBPF with vmlinux on x86_64 Ubuntu 21.04
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-x86_64-ubuntu21.04 \
        /bin/bash -c 'export REDBPF_VMLINUX=/boot/vmlinux \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'

  build-on-x86_64-debian11:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
    -
      name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    -
      name: Initialize git submodules
      run: |
        git submodule update --init --recursive
    -
      name: Build RedBPF with the kernel headers on x86_64 Debian 11
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-x86_64-debian11 \
        /bin/bash -c 'export KERNEL_SOURCE=$(echo /lib/modules/*) \
          && echo KERNEL_SOURCE=$KERNEL_SOURCE \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'
    -
      name: Build RedBPF with vmlinux on x86_64 Debian 11
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-x86_64-debian11 \
        /bin/bash -c 'export REDBPF_VMLINUX=/boot/vmlinux \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'

  build-on-x86_64-fedora35:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
    -
      name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    -
      name: Initialize git submodules
      run: |
        git submodule update --init --recursive
    -
      name: Build RedBPF with the kernel headers on x86_64 Fedora 35
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-x86_64-fedora35 \
        /bin/bash -c 'export KERNEL_SOURCE=$(echo /lib/modules/*) \
          && echo KERNEL_SOURCE=$KERNEL_SOURCE \
          && cargo clean \
          && cargo build --no-default-features --features=llvm13 \
          && cargo build --no-default-features --features=llvm13,command-line --bin cargo-bpf \
          && cargo build --no-default-features --features=llvm13,kernel5_8 --examples'
    -
      name: Build RedBPF with vmlinux on x86_64 Fedora 35
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-x86_64-fedora35 \
        /bin/bash -c 'export REDBPF_VMLINUX=/boot/vmlinux \
          && cargo clean \
          && cargo build --no-default-features --features=llvm13 \
          && cargo build --no-default-features --features=llvm13,command-line --bin cargo-bpf \
          && cargo build --no-default-features --features=llvm13,kernel5_8 --examples'

  build-on-x86_64-alpine315:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
    -
      name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    -
      name: Initialize git submodules
      run: |
        git submodule update --init --recursive
    -
      name: Build RedBPF with the kernel headers on x86_64 Alpine 3.15
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-x86_64-alpine3.15 \
        /bin/bash -c 'export KERNEL_SOURCE=$(echo /lib/modules/*) \
          && echo KERNEL_SOURCE=$KERNEL_SOURCE \
          && export RUSTFLAGS=-Ctarget-feature=-crt-static \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'

  build-on-x86_64-archlinux:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
    -
      name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    -
      name: Initialize git submodules
      run: |
        git submodule update --init --recursive
    -
      name: Build RedBPF with the kernel headers on x86_64 Arch Linux
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-x86_64-archlinux \
        /bin/bash -c 'export KERNEL_SOURCE=$(echo /lib/modules/*) \
          && echo KERNEL_SOURCE=$KERNEL_SOURCE \
          && cargo clean \
          && cargo build --no-default-features --features=llvm13 \
          && cargo build --no-default-features --features=llvm13,command-line --bin cargo-bpf \
          && cargo build --no-default-features --features=llvm13,kernel5_8 --examples'
    -
      name: Build RedBPF with vmlinux on x86_64 Arch Linux
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-x86_64-archlinux \
        /bin/bash -c 'export REDBPF_VMLINUX=/boot/vmlinux \
          && cargo clean \
          && cargo build --no-default-features --features=llvm13 \
          && cargo build --no-default-features --features=llvm13,command-line --bin cargo-bpf \
          && cargo build --no-default-features --features=llvm13,kernel5_8 --examples'

  ubuntu-2004-build-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    - name: Initialize git submodules
      run: |
        git submodule update --init --recursive
    - name: Run RedBPF build on ubuntu-20.04 container
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $BASE_IMAGE:latest-ubuntu-20.04 \
        /bin/bash -c 'cargo clean && export KERNEL_VERSION=$(ls --indicator-style=none /lib/modules/) && echo KERNEL_VERSION=$KERNEL_VERSION && cargo build && cargo build --examples'

  ubuntu-1804-build-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    - name: Initialize git submodules
      run: |
        git submodule update --init --recursive
    - name: Run RedBPF build with kernel v4.19 on ubuntu-18.04 container
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $BASE_IMAGE:latest-ubuntu-18.04 \
        /bin/bash -c 'cargo clean && export KERNEL_VERSION=$(ls --indicator-style=none /lib/modules/) && echo KERNEL_VERSION=$KERNEL_VERSION && cargo build && cargo build --examples'

  fedora-34-build-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    - name: Initialize git submodules
      run: |
        git submodule update --init --recursive
    - name: Run RedBPF build with kernel headers on fedora-34 container
      # Run 'make prepare' to prevent generated/autoconf.h from being removed
      # when 'make -qp' is executed by bpf_sys::headers::build_kernel_version
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $BASE_IMAGE:latest-fedora-34 \
        /bin/bash -c 'make -C /lib/modules/*/build prepare; cargo clean && export KERNEL_VERSION=$(ls --indicator-style=none /lib/modules/) && echo KERNEL_VERSION=$KERNEL_VERSION && cargo build && cargo build --examples'
    - name: Run RedBPF build with vmlinux on fedora-34 container
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $BASE_IMAGE:latest-fedora-34 \
        /bin/bash -c 'cargo clean && /lib/modules/*/build/scripts/extract-vmlinux /lib/modules/*/vmlinuz > /boot/vmlinux && export REDBPF_VMLINUX=/boot/vmlinux && cargo build && cargo build --examples'

  alpine-314-build-test:
    name: Alpine 3.14
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    - name: Initialize git submodules
      run: |
        git submodule update --init --recursive
    - name: Run RedBPF build on alpine-3.14 container
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $BASE_IMAGE:latest-alpine \
        sh -c 'cargo clean && export KERNEL_VERSION=$(ls --indicator-style=none /lib/modules/) RUSTFLAGS=-Ctarget-feature=-crt-static && echo KERNEL_VERSION=$KERNEL_VERSION && cargo +1.51 build --no-default-features --features llvm11 && cargo +1.51 build --no-default-features --features llvm11 --examples'

  build-on-aarch64-ubuntu-2104:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
    -
      name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    -
      name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
      with:
        image: tonistiigi/binfmt:latest
        platforms: linux/arm64
    -
      name: Available platforms
      run: echo ${{ steps.qemu.outputs.platforms }}
    -
      name: Initialize git submodules
      run: |
        git submodule update --init --recursive
    -
      name: Build RedBPF with the kernel headers on aarch64 Ubuntu 21.04
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-aarch64-ubuntu21.04 \
        /bin/bash -c 'export KERNEL_SOURCE=$(echo /lib/modules/*) \
          && echo KERNEL_SOURCE=$KERNEL_SOURCE \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'
    -
      name: Build RedBPF with vmlinux on aarch64 Ubuntu 21.04
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-aarch64-ubuntu21.04 \
        /bin/bash -c 'export REDBPF_VMLINUX=/boot/vmlinux-btf \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'

  build-on-aarch64-debian11:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
    -
      name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    -
      name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
      with:
        image: tonistiigi/binfmt:latest
        platforms: linux/arm64
    -
      name: Available platforms
      run: echo ${{ steps.qemu.outputs.platforms }}
    -
      name: Initialize git submodules
      run: |
        git submodule update --init --recursive
    -
      name: Build RedBPF with the kernel headers on aarch64 Debian 11
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-aarch64-debian11 \
        /bin/bash -c 'export KERNEL_SOURCE=$(echo /lib/modules/*) \
          && echo KERNEL_SOURCE=$KERNEL_SOURCE \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'
    -
      name: Build RedBPF with vmlinux on aarch64 Debian 11
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-aarch64-debian11 \
        /bin/bash -c 'export REDBPF_VMLINUX=/boot/vmlinux-btf \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'

  build-on-aarch64-fedora35:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
    -
      name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    -
      name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
      with:
        image: tonistiigi/binfmt:latest
        platforms: linux/arm64
    -
      name: Available platforms
      run: echo ${{ steps.qemu.outputs.platforms }}
    -
      name: Initialize git submodules
      run: |
        git submodule update --init --recursive
    -
      name: Build RedBPF with the kernel headers on aarch64 Fedora 35
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-aarch64-fedora35 \
        /bin/bash -c 'export KERNEL_SOURCE=$(echo /lib/modules/*) \
          && echo KERNEL_SOURCE=$KERNEL_SOURCE \
          && cargo clean \
          && cargo build --no-default-features --features=llvm13 \
          && cargo build --no-default-features --features=llvm13,command-line --bin cargo-bpf \
          && cargo build --no-default-features --features=llvm13,kernel5_8 --examples'
    -
      name: Build RedBPF with vmlinux on aarch64 Fedora 35
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-aarch64-fedora35 \
        /bin/bash -c 'export REDBPF_VMLINUX=/boot/vmlinux-btf \
          && cargo clean \
          && cargo build --no-default-features --features=llvm13 \
          && cargo build --no-default-features --features=llvm13,command-line --bin cargo-bpf \
          && cargo build --no-default-features --features=llvm13,kernel5_8 --examples'

  build-on-aarch64-alpine315:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
    -
      name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    -
      name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
      with:
        image: tonistiigi/binfmt:latest
        platforms: linux/arm64
    -
      name: Available platforms
      run: echo ${{ steps.qemu.outputs.platforms }}
    -
      name: Initialize git submodules
      run: |
        git submodule update --init --recursive
    -
      name: Build RedBPF with the kernel headers on aarch64 Alpine 3.15
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-aarch64-alpine3.15 \
        /bin/bash -c 'export KERNEL_SOURCE=$(echo /lib/modules/*) \
          && echo KERNEL_SOURCE=$KERNEL_SOURCE \
          && export RUSTFLAGS=-Ctarget-feature=-crt-static \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'

  publish:
    runs-on: ubuntu-latest
    if: startsWith( github.ref, 'refs/tags/v')
    needs:
    - build-on-x86_64-ubuntu-2104
    - build-on-x86_64-debian11
    - build-on-x86_64-fedora35
    - build-on-x86_64-alpine315
    - build-on-x86_64-archlinux
    - fedora-34-build-test
    - ubuntu-2004-build-test
    - ubuntu-1804-build-test
    - alpine-314-build-test
    - build-on-aarch64-ubuntu-2104
    - build-on-aarch64-debian11
    - build-on-aarch64-fedora35
    - build-on-aarch64-alpine315

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - name: Publish release
      run: |
        cargo login ${{ secrets.CARGO_REGISTRY_TOKEN }}
        for i in bpf-sys redbpf cargo-bpf redbpf-macros redbpf-probes; do
          while ! (cd $i; cargo publish -v --no-verify); do
            sleep 30
          done
        done
