name: RedBPF build test

on:
  push:
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  BASE_IMAGE: ghcr.io/${{ github.repository_owner }}/foniod-build
  REDBPF_IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/redbpf-build

jobs:
  build-on-x86_64-ubuntu-2204:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    -
      name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    -
      name: Build RedBPF with the kernel headers on x86_64 Ubuntu 22.04
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-x86_64-ubuntu22.04 \
        bash -c 'export KERNEL_SOURCE=$(echo /lib/modules/*) \
          && echo KERNEL_SOURCE=$KERNEL_SOURCE \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'
    -
      name: Build RedBPF with vmlinux on x86_64 Ubuntu 22.04
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-x86_64-ubuntu22.04 \
        /bin/bash -c 'export REDBPF_VMLINUX=/boot/vmlinux \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'

  build-on-x86_64-debian11:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    -
      name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    -
      name: Build RedBPF with the kernel headers on x86_64 Debian 11
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-x86_64-debian11 \
        /bin/bash -c 'export KERNEL_SOURCE=$(echo /lib/modules/*) \
          && echo KERNEL_SOURCE=$KERNEL_SOURCE \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'
    -
      name: Build RedBPF with vmlinux on x86_64 Debian 11
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-x86_64-debian11 \
        /bin/bash -c 'export REDBPF_VMLINUX=/boot/vmlinux \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'

  build-on-x86_64-fedora36:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    -
      name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    -
      name: Build RedBPF with the kernel headers on x86_64 Fedora 36
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-x86_64-fedora36 \
        /bin/bash -c 'export KERNEL_SOURCE=$(echo /lib/modules/*) \
          && echo KERNEL_SOURCE=$KERNEL_SOURCE \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'
    -
      name: Build RedBPF with vmlinux on x86_64 Fedora 36
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-x86_64-fedora36 \
        /bin/bash -c 'export REDBPF_VMLINUX=/boot/vmlinux \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'

  build-on-x86_64-alpine-edge:
    name: Alpine Edge
    if: false
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    -
      name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    -
      name: Build RedBPF with the kernel headers on x86_64 Alpine Edge
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-x86_64-alpine-edge \
        /bin/bash -c 'export KERNEL_SOURCE=$(echo /lib/modules/*) \
          && echo KERNEL_SOURCE=$KERNEL_SOURCE \
          && export RUSTFLAGS=-Ctarget-feature=-crt-static \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features="kernel5_8 llvm13" --examples'

  build-on-x86_64-archlinux:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    -
      name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    -
      name: Build RedBPF with the kernel headers on x86_64 Arch Linux
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-x86_64-archlinux \
        /bin/bash -c 'export KERNEL_SOURCE=$(echo /lib/modules/*) \
          && echo KERNEL_SOURCE=$KERNEL_SOURCE \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'
    -
      name: Build RedBPF with vmlinux on x86_64 Arch Linux
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-x86_64-archlinux \
        /bin/bash -c 'export REDBPF_VMLINUX=/boot/vmlinux \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'

  build-on-x86_64-ubuntu-2004:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    -
      name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    -
      name: Build RedBPF with the kernel headers on x86_64 Ubuntu 20.04 LTS
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-x86_64-ubuntu20.04 \
        bash -c 'export KERNEL_SOURCE=$(echo /lib/modules/*) \
          && echo KERNEL_SOURCE=$KERNEL_SOURCE \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --examples'

  build-on-x86_64-gentoo:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    -
      name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    -
      name: Build RedBPF with the kernel headers on x86_64 Gentoo
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-x86_64-gentoo \
        bash -c 'export KERNEL_SOURCE=$(echo /lib/modules/*) \
          && echo KERNEL_SOURCE=$KERNEL_SOURCE \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --examples'

  build-on-aarch64-ubuntu-2204:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    -
      name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    -
      name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
      with:
        image: tonistiigi/binfmt:latest
        platforms: linux/arm64
    -
      name: Available platforms
      run: echo ${{ steps.qemu.outputs.platforms }}
    -
      name: Build RedBPF with the kernel headers on aarch64 Ubuntu 22.04
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-aarch64-ubuntu22.04 \
        /bin/bash -c 'export KERNEL_SOURCE=$(echo /lib/modules/*) \
          && echo KERNEL_SOURCE=$KERNEL_SOURCE \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'
    -
      name: Build RedBPF with vmlinux on aarch64 Ubuntu 22.04
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-aarch64-ubuntu22.04 \
        /bin/bash -c 'export REDBPF_VMLINUX=/boot/vmlinux-btf \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'

  build-on-aarch64-debian11:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    -
      name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    -
      name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
      with:
        image: tonistiigi/binfmt:latest
        platforms: linux/arm64
    -
      name: Available platforms
      run: echo ${{ steps.qemu.outputs.platforms }}
    -
      name: Build RedBPF with the kernel headers on aarch64 Debian 11
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-aarch64-debian11 \
        /bin/bash -c 'export KERNEL_SOURCE=$(echo /lib/modules/*) \
          && echo KERNEL_SOURCE=$KERNEL_SOURCE \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'
    -
      name: Build RedBPF with vmlinux on aarch64 Debian 11
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-aarch64-debian11 \
        /bin/bash -c 'export REDBPF_VMLINUX=/boot/vmlinux-btf \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'

  # Split aarch64-fedora36 into two parts because its running time exceeds 6
  # hours, the maximum time for build test.
  build-on-aarch64-fedora36-header:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    -
      name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    -
      name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
      with:
        image: tonistiigi/binfmt:latest
        platforms: linux/arm64
    -
      name: Available platforms
      run: echo ${{ steps.qemu.outputs.platforms }}
    -
      name: Build RedBPF with the kernel headers on aarch64 Fedora 36
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-aarch64-fedora36 \
        /bin/bash -c 'export KERNEL_SOURCE=$(echo /lib/modules/*) \
          && echo KERNEL_SOURCE=$KERNEL_SOURCE \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'

  build-on-aarch64-fedora36-vmlinux:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    -
      name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    -
      name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
      with:
        image: tonistiigi/binfmt:latest
        platforms: linux/arm64
    -
      name: Available platforms
      run: echo ${{ steps.qemu.outputs.platforms }}
    -
      name: Build RedBPF with vmlinux on aarch64 Fedora 36
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-aarch64-fedora36 \
        /bin/bash -c 'export REDBPF_VMLINUX=/boot/vmlinux-btf \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features=kernel5_8 --examples'

  build-on-aarch64-alpine-edge:
    name: Alpine Edge
    if: false
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    -
      name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    -
      name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
      with:
        image: tonistiigi/binfmt:latest
        platforms: linux/arm64
    -
      name: Available platforms
      run: echo ${{ steps.qemu.outputs.platforms }}
    -
      name: Build RedBPF with the kernel headers on aarch64 Alpine Edge
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-aarch64-alpine-edge \
        /bin/bash -c 'export KERNEL_SOURCE=$(echo /lib/modules/*) \
          && echo KERNEL_SOURCE=$KERNEL_SOURCE \
          && export RUSTFLAGS=-Ctarget-feature=-crt-static \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --features="kernel5_8 llvm13" --examples'

  build-on-aarch64-ubuntu-2004:
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
    -
      name: Build host info
      run: |
        uname -a
        cat /etc/os-release
    -
      name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
      with:
        image: tonistiigi/binfmt:latest
        platforms: linux/arm64
    -
      name: Available platforms
      run: echo ${{ steps.qemu.outputs.platforms }}
    -
      name: Initialize git submodules
      run: |
        git submodule update --init --recursive
    -
      name: Build RedBPF with the kernel headers on aarch64 Ubuntu 20.04 LTS
      run: |
        docker run --privileged \
        -v $PWD:/build \
        -w /build \
        $REDBPF_IMAGE_NAME:latest-aarch64-ubuntu20.04 \
        /bin/bash -c 'export KERNEL_SOURCE=$(echo /lib/modules/*) \
          && echo KERNEL_SOURCE=$KERNEL_SOURCE \
          && cargo clean \
          && cargo build \
          && cargo build --bin cargo-bpf \
          && cargo build --examples'

  build-on-x86_64-nix-stable:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.4.0
      with:
        submodules: recursive
    - uses: cachix/install-nix-action@v17
      with:
        nix_path: nixpkgs=channel:nixos-21.11
    - run: nix build '.?submodules=1'

  build-on-x86_64-nix-unstable:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.4.0
      with:
        submodules: recursive
    - uses: cachix/install-nix-action@v17
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    - run: nix build '.?submodules=1'

  publish:
    runs-on: ubuntu-latest
    if: startsWith( github.ref, 'refs/tags/v')
    needs:
    - build-on-x86_64-ubuntu-2204
    - build-on-x86_64-debian11
    - build-on-x86_64-fedora36
    - build-on-x86_64-alpine-edge
    - build-on-x86_64-archlinux
    - build-on-x86_64-ubuntu-2004
    - build-on-x86_64-gentoo
    - build-on-x86_64-nix-stable
    - build-on-x86_64-nix-unstable
    - build-on-aarch64-ubuntu-2204
    - build-on-aarch64-debian11
    - build-on-aarch64-fedora36-header
    - build-on-aarch64-fedora36-vmlinux
    - build-on-aarch64-alpine-edge
    - build-on-aarch64-ubuntu-2004

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
    - name: Publish release
      run: |
        cargo login ${{ secrets.CARGO_REGISTRY_TOKEN }}
        for i in bpf-sys redbpf cargo-bpf redbpf-macros redbpf-probes; do
          while ! (cd $i; cargo publish -v --no-verify); do
            sleep 30
          done
        done
